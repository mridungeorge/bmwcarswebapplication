{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mridu\\\\cybsecproj3\\\\frontend\\\\src\\\\components\\\\LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/login\", {\n        username,\n        password\n      });\n      if (response.data.success) {\n        navigate(\"/\"); // Redirect to home on success\n      } else {\n        setErrorMessage(\"Invalid username or password\"); // Show custom error message\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        var _error$response, _error$response$data;\n        // If the error comes from Axios, we can try to get the server's response message\n        setErrorMessage((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"An error occurred during login\");\n      } else {\n        setErrorMessage(\"An error occurred during login\"); // Generic error message\n      }\n    }\n  };\n\n  // The return JSX should remain unchanged to keep the styling as it was\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-form\",\n    children: errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"OcEh96ookApaGYrUhZcJPgbvkKE=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","LoginForm","_s","username","setUsername","password","setPassword","errorMessage","setErrorMessage","navigate","handleSubmit","e","preventDefault","response","post","data","success","error","isAxiosError","_error$response","_error$response$data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mridu/cybsecproj3/frontend/src/components/LoginForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios, { AxiosError } from \"axios\";\r\n\r\nfunction LoginForm() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/login\", {\r\n        username,\r\n        password,\r\n      });\r\n      if (response.data.success) {\r\n        navigate(\"/\"); // Redirect to home on success\r\n      } else {\r\n        setErrorMessage(\"Invalid username or password\"); // Show custom error message\r\n      }\r\n    } catch (error: any) {\r\n      if (axios.isAxiosError(error)) {\r\n        // If the error comes from Axios, we can try to get the server's response message\r\n        setErrorMessage(\r\n          error?.response?.data?.message || \"An error occurred during login\"\r\n        );\r\n      } else {\r\n        setErrorMessage(\"An error occurred during login\"); // Generic error message\r\n      }\r\n    }\r\n  };\r\n\r\n  // The return JSX should remain unchanged to keep the styling as it was\r\n  return (\r\n    <div className=\"login-form\">\r\n      {/* ... rest of your JSX */}\r\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAsB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9B,MAAMa,YAAY,GAAG,MAAOC,CAAmC,IAAK;IAClEA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,iCAAiC,EAAE;QACnEX,QAAQ;QACRE;MACF,CAAC,CAAC;MACF,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBP,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACLD,eAAe,CAAC,8BAA8B,CAAC,CAAC,CAAC;MACnD;IACF,CAAC,CAAC,OAAOS,KAAU,EAAE;MACnB,IAAInB,KAAK,CAACoB,YAAY,CAACD,KAAK,CAAC,EAAE;QAAA,IAAAE,eAAA,EAAAC,oBAAA;QAC7B;QACAZ,eAAe,CACb,CAAAS,KAAK,aAALA,KAAK,wBAAAE,eAAA,GAALF,KAAK,CAAEJ,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAfD,eAAA,CAAiBJ,IAAI,cAAAK,oBAAA,uBAArBA,oBAAA,CAAuBC,OAAO,KAAI,gCACpC,CAAC;MACH,CAAC,MAAM;QACLb,eAAe,CAAC,gCAAgC,CAAC,CAAC,CAAC;MACrD;IACF;EACF,CAAC;;EAED;EACA,oBACER,OAAA;IAAKsB,SAAS,EAAC,YAAY;IAAAC,QAAA,EAExBhB,YAAY,iBAAIP,OAAA;MAAKsB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEhB;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV;AAACzB,EAAA,CArCQD,SAAS;EAAA,QAICJ,WAAW;AAAA;AAAA+B,EAAA,GAJrB3B,SAAS;AAuClB,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}