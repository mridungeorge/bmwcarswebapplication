{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mridu\\\\cybsecproj3\\\\frontend\\\\src\\\\components\\\\LoginForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// Define an interface for your expected error response structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/login\", {\n        username,\n        password\n      });\n      if (response.data.success) {\n        navigate(\"/home\"); // Adjust this as per your routing setup\n      } else {\n        setErrorMessage(response.data.message || \"Login failed\");\n      }\n    } catch (error) {\n      var _axiosError$response;\n      const axiosError = error;\n      // Use type assertion to tell TypeScript the shape of data we're expecting\n      const errorResponse = (_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : _axiosError$response.data;\n      setErrorMessage(errorResponse.message || \"An error occurred during login\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [\"// Your form inputs and submit button here\", errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"OcEh96ookApaGYrUhZcJPgbvkKE=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","LoginForm","_s","username","setUsername","password","setPassword","errorMessage","setErrorMessage","navigate","handleSubmit","e","preventDefault","response","post","data","success","message","error","_axiosError$response","axiosError","errorResponse","onSubmit","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mridu/cybsecproj3/frontend/src/components/LoginForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios, { AxiosError } from \"axios\";\r\n\r\n// Define an interface for your expected error response structure\r\ninterface ErrorResponse {\r\n  message?: string;\r\n}\r\n\r\nfunction LoginForm() {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/login\", {\r\n        username,\r\n        password,\r\n      });\r\n      if (response.data.success) {\r\n        navigate(\"/home\"); // Adjust this as per your routing setup\r\n      } else {\r\n        setErrorMessage(response.data.message || \"Login failed\");\r\n      }\r\n    } catch (error) {\r\n      const axiosError = error as AxiosError;\r\n      // Use type assertion to tell TypeScript the shape of data we're expecting\r\n      const errorResponse = axiosError.response?.data as ErrorResponse;\r\n      setErrorMessage(\r\n        errorResponse.message || \"An error occurred during login\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      // Your form inputs and submit button here\r\n      {errorMessage && <div style={{ color: \"red\" }}>{errorMessage}</div>}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAsB,OAAO;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9B,MAAMa,YAAY,GAAG,MAAOC,CAAmC,IAAK;IAClEA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,iCAAiC,EAAE;QACnEX,QAAQ;QACRE;MACF,CAAC,CAAC;MACF,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzBP,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;MACrB,CAAC,MAAM;QACLD,eAAe,CAACK,QAAQ,CAACE,IAAI,CAACE,OAAO,IAAI,cAAc,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,oBAAA;MACd,MAAMC,UAAU,GAAGF,KAAmB;MACtC;MACA,MAAMG,aAAa,IAAAF,oBAAA,GAAGC,UAAU,CAACP,QAAQ,cAAAM,oBAAA,uBAAnBA,oBAAA,CAAqBJ,IAAqB;MAChEP,eAAe,CACba,aAAa,CAACJ,OAAO,IAAI,gCAC3B,CAAC;IACH;EACF,CAAC;EAED,oBACEjB,OAAA;IAAMsB,QAAQ,EAAEZ,YAAa;IAAAa,QAAA,GAAC,4CAE5B,EAAChB,YAAY,iBAAIP,OAAA;MAAKwB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAF,QAAA,EAAEhB;IAAY;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEX;AAAC3B,EAAA,CAlCQD,SAAS;EAAA,QAICJ,WAAW;AAAA;AAAAiC,EAAA,GAJrB7B,SAAS;AAoClB,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}